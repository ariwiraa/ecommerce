package com.personal.ecommerce.config.middleware;

import com.personal.ecommerce.common.errors.BadRequestException;
import com.personal.ecommerce.common.errors.ConflictException;
import com.personal.ecommerce.common.errors.ResourceNotFoundException;
import com.personal.ecommerce.common.errors.UnauthorizedException;
import com.personal.ecommerce.model.dto.BaseResponse;
import com.personal.ecommerce.model.dto.ErrorResponse;
import io.jsonwebtoken.ExpiredJwtException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AccountStatusException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import javax.naming.AuthenticationException;
import javax.naming.InsufficientResourcesException;
import java.nio.file.AccessDeniedException;
import java.security.SignatureException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@RestControllerAdvice
@Slf4j
public class GenericExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public @ResponseBody BaseResponse<Object> handlerResourceNotFoundException(HttpServletRequest httpServletRequest,
                                                                               ResourceNotFoundException exception) {

        return BaseResponse.error(exception.getMessage());
    }

    @ExceptionHandler(BadRequestException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public @ResponseBody BaseResponse<Object> handlerBadRequestException(HttpServletRequest httpServletRequest,
                                                                         BadRequestException exception) {
        return BaseResponse.error(exception.getMessage());
    }

    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public @ResponseBody BaseResponse<Object> handlerInternalServerErrorException(HttpServletRequest httpServletRequest,
                                                                                  HttpServletResponse response,
                                                                                  Exception exception) {
        if (exception instanceof BadCredentialsException ||
                exception instanceof AccessDeniedException ||
                exception instanceof AccountStatusException ||
                exception instanceof SignatureException ||
                exception instanceof ExpiredJwtException ||
                exception instanceof AuthenticationException ||
                exception instanceof InsufficientResourcesException) {

            response.setStatus(HttpStatus.FORBIDDEN.value());
            return BaseResponse.error("internal server error", exception.getMessage());
        }

        return BaseResponse.error("internal server error", exception.getMessage());
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public @ResponseBody BaseResponse<Object> handlerMethodArgumentNotValidException(MethodArgumentNotValidException ex) {

        return BaseResponse.error(ex.getMessage());
    }

    @ExceptionHandler(ConflictException.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public @ResponseBody BaseResponse<Object> handlerConflictException(ConflictException ex,
                                                                       HttpServletRequest req) {

        return BaseResponse.error(ex.getMessage());
    }

    @ExceptionHandler(UnauthorizedException.class)
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public @ResponseBody BaseResponse<Object> handlerInternalServerErrorException(UnauthorizedException ex,
                                                                                  HttpServletRequest req) {

        return BaseResponse.error(ex.getMessage());
    }
}
